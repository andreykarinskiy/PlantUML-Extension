name: Build

on:
  push:
    branches: [ "master", "develop" ]
    paths:
      - '!version.json'
      - '!ReleaseNotes.md'

  pull_request:
    branches: [ "master" ]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'

      - name: Calculate version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0
        with:
          additionalArguments: '/output json /output buildserver'

      - name: Generate version files
        run: |
          # Создание version.json
          echo '${{ steps.gitversion.outputs.json }}' | jq . > version.json
          
          # Генерация ReleaseNotes.md
          echo "# Release ${{ steps.gitversion.outputs.semVer }} ($(date -u +'%Y-%m-%d'))" > ReleaseNotes.md
          echo "" >> ReleaseNotes.md
          
          if [ -z "${{ steps.gitversion.outputs.previousTag }}" ]; then
            echo "## Initial Release" >> ReleaseNotes.md
            git log --pretty=format:"- %s (%h)" --no-merges >> ReleaseNotes.md
          else
            echo "## Changes since ${{ steps.gitversion.outputs.previousTag }}" >> ReleaseNotes.md
            git log --pretty=format:"- %s (%h)" "${{ steps.gitversion.outputs.previousTag }}"..HEAD --no-merges >> ReleaseNotes.md
          fi

     # - name: Pull latest changes before push
     #   run: git pull --rebase origin ${{ github.ref_name }}

      - name: Commit and push version files
        env:
          VERSION: ${{ steps.gitversion.outputs.semVer }}
        run: |
          # Настройка git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Добавление файлов и коммит
          git add version.json ReleaseNotes.md
          git commit -m "ci: Update version to $VERSION [skip ci]"
          
          # Пуш изменений
          git push origin HEAD:${{ github.ref_name }}

      - name: Prepare and package PlantUML files
        id: package
        run: |
          find src -type f \( -name '*.puml' \) > filelist.txt
          
          if [ ! -s filelist.txt ]; then
            echo "No PlantUML files found in 'src' directory. Skipping archive creation."
            exit 0
          fi
          
          mkdir -p temp_archive
          
          while IFS= read -r file; do
            dest="${file#src/}"
            mkdir -p "temp_archive/$(dirname "$dest")"
            cp "$file" "temp_archive/$dest"
          done < filelist.txt
          
          cd temp_archive
          zip -r ../PlantUml-Extension.zip .
          cd ..
          
          rm -rf temp_archive filelist.txt

      - uses: actions/upload-artifact@v4
        with:
          name: PlantUml-Extension
          path: '**/*.zip'
